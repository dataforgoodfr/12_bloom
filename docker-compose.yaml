x-common-infos:
  # Env variables stored in a .env file at same level than docker-compose.yaml
  environment: &common-env
    POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-postgres_bloom}
    POSTGRES_DB: ${POSTGRES_DB:-bloom_db}
    POSTGRES_USER: ${POSTGRES_USER:-bloom_user}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bloom}
    LOGGING_LEVEL: ${LOGGING_LEVEL:-INFO}

services:
  bloom-backend:
    container_name: bloom_backend
    hostname: bloom-backend
    image: d4g/bloom:${VERSION:-latest}
    working_dir: /project/backend
    command:
        - bash
        - -c
        - |
            echo "Starting Scheduler" &&
            cron -f -L 2
    volumes:
      - ./:/project/
      - ./data:/project/data
    environment:
      <<: *common-env
      POSTGRES_PORT: 5432
      STREAMLIT_SERVER_ADDRESS: ${STREAMLIT_SERVER_ADDRESS:-0.0.0.0}
    ports:
      - 8501:8501
    networks:
      - bloom_net
    depends_on:
      bloom-init:
        condition: service_completed_successfully

  bloom-postgres:
    container_name: postgres_bloom
    hostname: bloom-postgres
    image: ${POSTGIS_IMAGE:-postgis/postgis:14-3.3-alpine}
    environment:
      <<: *common-env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    networks:
      - bloom_net
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "pg_isready --quiet --dbname=$${POSTGRES_DB:-bloom_db} --username=$${POSTGRES_USER:-bloom_user}"
        ]
      interval: 100ms
      timeout: 14s
      retries: 140
      start_period: 0s

  bloom-frontend:
    container_name: bloom_frontend
    hostname: bloom-frontend
    image: d4g/bloom:${VERSION:-latest}
    command: env node ./node_modules/next/dist/bin/next start --hostname 0.0.0.0
    working_dir: /project/frontend
    volumes:
      - ./:/project/
      - ./data:/project/frontend/public/data
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL:-INFO}
    networks:
      - bloom_net
    ports:
      - ${HTTP_PORT:-3000}:3000
    depends_on:
      bloom-init:
        condition: service_completed_successfully

  bloom-init:
    container_name: bloom_init
    hostname: bloom-init
    image: d4g/bloom:${VERSION:-latest}

    # Nominal start:
    # As postgres+postgis gt available, then unavialable, then avialable at database init
    # it happens that init is launch before second and definitve postgres healthy state
    # and fails
    # so giving init 3 chances and 15 seconds to init before failing
    command: /bin/bash -c "cd backend; for i in 1 2 3; do alembic upgrade head && break || sleep 5; done"
    # Debug start:
    #command: bash
    #tty: true
    #stdin_open: true
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      args:
        IMAGE_PYTHON: ${IMAGE_PYTHON:-python:3.10-slim-bullseye}
        POETRY_VERSION: ${POETRY_VERSION:-1.8.2}

    environment:
      <<: *common-env
      POSTGRES_PORT: 5432
    volumes:
      - ./:/project/
    networks:
      - bloom_net
    depends_on:
      bloom-postgres:
        condition: service_healthy # The service is working and still running

networks:
  bloom_net:
    name: bloom_net
